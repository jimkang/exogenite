digraph {
  subgraph cluster_souls {
    label="Souls";
    chooseAction -> chooseActionOpts [color=blue4];
    "MakeSouls" -> Soul [color=gray];
    SoulPool -> Soul;
    Soul -> repertoire;
    soulOps -> canDoAction;
    soulOps -> queueAction;
    soulOps -> takeTurn;
    takeTurn -> repertoire [color=blue4];
  };

  subgraph cluster_actions {
    label="Actions";
    repertoire -> Action;
    queuedActionsByTurn -> Action;
    Action -> execute;
    execute -> Soul [color=blue4];
    chooseActions -> canDo [color=blue4];
    execute -> canDo [color=blue4];
    Action -> canDo;
    canDo -> Soul [color=blue4];
    chooseActionOpts -> canDo [color=blue4];
    canDoAction -> canDo;
  }

  subgraph cluster_figures {
    label="Figures";
    figureTree -> Figure;
    "MakeSouls" -> figureTree;
    soulOps -> figureTree;
    Figure -> "position info"
    Figure -> "contents rendering datum";
    Figure -> Soul;
    Soul -> Figure;
    chooseAction -> figureTree;
  };

  subgraph cluster_dm {
    label="DM";
    runTurn -> solicitActions [color=blue4];
    runTurn -> SoulPool [color=blue4];
    runTurn -> soulOps;
    solicitActions -> getActionsForTurn [color=blue4];
    runTurn -> executeActions [color=blue4];
    executeActions -> Soul [color=blue4];
    executeActions -> SoulPool [color=blue4];
    executeActions -> execute [color=blue4];
  }

  subgraph cluster_playerActionRouter {
    label="playerActionRouter";
    "player input" -> wireInput [color=blue4];
    wireInput -> playerActionRouter [color=blue4];
    playerActionRouter -> canDoAction [color=blue4];
    playerActionRouter -> Soul;
    playerActionRouter -> runTurn [color=blue4];
    playerActionRouter -> soulOps;
  }

  subgraph cluster_app {
    label="app";
    init -> SoulPool [color=gray];
    init -> figureTree [color=gray];
    init -> wireInput [color=gray];
    init -> runTurn [color=gray, label="souls, figureTree"];
    init -> playerActionRouter [color=gray, label="runTurn, render"];
    init -> soulOps [color=gray, label="fieldOfView, figureTree"];
    render -> fieldOfView;
    render -> figureTree;
    playerActionRouter -> render [color=blue4];
    startTurn -> render;
    soulOps -> fieldOfView;
  }

   subgraph cluster_legend {
    label="Legend";
    gray -> creates [color=gray];
    black -> has;
    blue4 -> uses [color=blue4];
   }
}
