digraph {
  subgraph cluster_souls {
    label="Souls";
    chooseAction -> chooseActionOpts [color=blue4];
    "Souls array" -> Soul;
    Soul -> repertoire;
    chooseActions -> repertoire [color=blue4];
    getActionsForTurn -> chooseActions;
    chooseActions -> queuedActionsByTurn [color=blue4];
  };

  subgraph cluster_actions {
    label="Actions";
    repertoire -> Action;
    queuedActionsByTurn -> Action;
    Action -> execute;
    execute -> Soul [color=blue4];
    chooseActions -> canDo [color=blue4];
    execute -> canDo [color=blue4];
    Action -> canDo;
    canDo -> Soul [color=blue4];
    Action -> optsDef;
    chooseActionOpts -> optsDef [color=blue4];
  }

  subgraph cluster_figures {
    label="Figures";
    "Figure Tree" -> Figure;
    Figure -> "position info"
    Figure -> "contents rendering datum";
    Figure -> Soul;
    Soul -> Figure;
    chooseAction -> "Figure Tree";
  };

  subgraph cluster_dm {
    label="DM";
    startTurn -> solicitActions;
    solicitActions -> getActionsForTurn [color=blue4];
    startTurn -> executeActions [color=blue4];
    executeActions -> Soul [color=blue4];
    executeActions -> execute [color=blue4];
  }

  subgraph cluster_playerActionRouter {
    label="playerActionRouter";
    "player input" -> wireInput;
    wireInput -> playerActionRouter;
    playerActionRouter -> "Souls array";
    playerActionRouter -> "Figure Tree";
    playerActionRouter -> startTurn;
  }

  subgraph cluster_app {
    label="app";
    init -> "Souls array" [color=gray];
    init -> "Figure Tree" [color=gray];
    init -> wireInput [color=gray];
    init -> playerActionRouter [color=gray];
    "Rendering call" -> "field of view";
    "Rendering call" -> "Figure Tree";
    startTurn -> "Rendering call";
    executeActions -> "field of view";
  }

   subgraph cluster_legend {
    label="Legend";
    gray -> creates [color=gray];
    black -> has;
    blue4 -> uses [color=blue4];
   }
}
